/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package planifticateur.ui;

import java.awt.Color;
import java.awt.Point;
import java.io.File;
import java.lang.reflect.Field;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Pattern;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.SwingUtilities;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import planifticateur.domain.Activity;
import planifticateur.domain.Comment;
import planifticateur.domain.MainController;
import planifticateur.domain.CustomError;
import planifticateur.enumeration.DayEnumeration.Day;
import planifticateur.enumeration.ScaleMacro;
import planifticateur.enumeration.TypeErrorEnumeration.TypeError;

/**
 *
 * @author Antoine
 */
public class MainWindow extends javax.swing.JFrame {
    
    private boolean     statisticPopupOpen;
    private boolean     commentPopupOpen;
    private MovableBox  box;
    private Activity    editedActivity;

    /**
     * Creates new form MainWindow
     */
    public MainWindow() {
        box = null;
        editedActivity = null;
        initComponents();
    }
    
    public void setError(ArrayList<CustomError> errors) {
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        statisticsDialog = new javax.swing.JDialog();
        statisticsScrollPane = new javax.swing.JScrollPane();
        statisticsPanel = new javax.swing.JPanel();
        nbMaxCoursLabel = new javax.swing.JLabel();
        nbMaxCoursLundiLabel = new javax.swing.JLabel();
        nbMaxCoursLabelMardiLabel = new javax.swing.JLabel();
        nbMaxCoursMercrediLabel = new javax.swing.JLabel();
        nbMaxCoursJeudiLabel = new javax.swing.JLabel();
        nbMaxCoursVendrediLabel = new javax.swing.JLabel();
        nbMaxCoursSamediLabel = new javax.swing.JLabel();
        nbMaxCoursDimancheLabel = new javax.swing.JLabel();
        nbMaxCours0 = new javax.swing.JLabel();
        nbMaxCours1 = new javax.swing.JLabel();
        nbMaxCours2 = new javax.swing.JLabel();
        nbMaxCours3 = new javax.swing.JLabel();
        nbMaxCours4 = new javax.swing.JLabel();
        nbMaxCours5 = new javax.swing.JLabel();
        nbMaxCours6 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        nbMoyCoursLabel = new javax.swing.JLabel();
        nbMoyCoursLundiLabel = new javax.swing.JLabel();
        nbMoyCoursLabelMardiLabel = new javax.swing.JLabel();
        nbMoyCoursMercrediLabel = new javax.swing.JLabel();
        nbMoyCoursJeudiLabel = new javax.swing.JLabel();
        nbMoyCoursVendrediLabel = new javax.swing.JLabel();
        nbMoyCoursSamediLabel = new javax.swing.JLabel();
        nbMoyCoursDimancheLabel = new javax.swing.JLabel();
        nbMoyCours0 = new javax.swing.JLabel();
        nbMoyCours1 = new javax.swing.JLabel();
        nbMoyCours2 = new javax.swing.JLabel();
        nbMoyCours3 = new javax.swing.JLabel();
        nbMoyCours4 = new javax.swing.JLabel();
        nbMoyCours5 = new javax.swing.JLabel();
        nbMoyCours6 = new javax.swing.JLabel();
        jSeparator3 = new javax.swing.JSeparator();
        nbCoursLabel = new javax.swing.JLabel();
        nbCoursLundiLabel = new javax.swing.JLabel();
        nbCoursMardiLabel = new javax.swing.JLabel();
        nbCoursMercrediLabel = new javax.swing.JLabel();
        nbCoursJeudiLabel = new javax.swing.JLabel();
        nbCoursVendrediLabel = new javax.swing.JLabel();
        nbCoursSamediLabel = new javax.swing.JLabel();
        nbCoursDimancheLabel = new javax.swing.JLabel();
        nbCours0 = new javax.swing.JLabel();
        nbCours1 = new javax.swing.JLabel();
        nbCours2 = new javax.swing.JLabel();
        nbCours3 = new javax.swing.JLabel();
        nbCours4 = new javax.swing.JLabel();
        nbCours5 = new javax.swing.JLabel();
        nbCours6 = new javax.swing.JLabel();
        jSeparator4 = new javax.swing.JSeparator();
        indiceCovoiturageLabel = new javax.swing.JLabel();
        indiceCovoiturage = new javax.swing.JLabel();
        jSeparator5 = new javax.swing.JSeparator();
        indiceCongestionLabel = new javax.swing.JLabel();
        indiceCongestion = new javax.swing.JLabel();
        editDialog = new javax.swing.JDialog();
        editScrollPane = new javax.swing.JScrollPane();
        editPanel = new javax.swing.JPanel();
        codeLabel = new javax.swing.JLabel();
        codeValue = new javax.swing.JLabel();
        sectionLabel = new javax.swing.JLabel();
        sectionValue = new javax.swing.JTextField();
        profLabel = new javax.swing.JLabel();
        profValue = new javax.swing.JTextField();
        typeLabel = new javax.swing.JLabel();
        typeValue = new javax.swing.JTextField();
        timeLabel = new javax.swing.JLabel();
        timeValue = new javax.swing.JFormattedTextField();
        nameLabel = new javax.swing.JLabel();
        nameValue = new javax.swing.JTextField();
        validateEdition = new javax.swing.JButton();
        errorUpdateLabel = new javax.swing.JLabel();
        commentDialog = new javax.swing.JDialog();
        commentScrollPane = new javax.swing.JScrollPane();
        commentPanel = new javax.swing.JPanel();
        tabScrollPane = new javax.swing.JScrollPane();
        commentaryTab = new javax.swing.JTable();
        dateLabel = new javax.swing.JLabel();
        activityLabel = new javax.swing.JLabel();
        versionLabel = new javax.swing.JLabel();
        commentaryLabel = new javax.swing.JLabel();
        dateValue = new javax.swing.JLabel();
        activityValue = new javax.swing.JTextField();
        versionValue = new javax.swing.JTextField();
        areaScrollPane = new javax.swing.JScrollPane();
        commentaryValue = new javax.swing.JTextArea();
        validateComment = new javax.swing.JButton();
        errorCommentLabel = new javax.swing.JLabel();
        selectSession = new javax.swing.JDialog();
        selectSessionLabel = new javax.swing.JLabel();
        automnButton = new javax.swing.JButton();
        winterButton = new javax.swing.JButton();
        summerButton = new javax.swing.JButton();
        mainWindow = new javax.swing.JPanel();
        groupButton = new javax.swing.JPanel();
        autoverificationToggle = new javax.swing.JToggleButton();
        autoPlanificationButton = new javax.swing.JButton();
        statisticButton = new javax.swing.JButton();
        commentButton = new javax.swing.JButton();
        etatSchedule = new javax.swing.JLabel();
        splitDesignError = new javax.swing.JSplitPane();
        splitDrawerActivity = new javax.swing.JSplitPane();
        weekScroller = new javax.swing.JScrollPane();
        weekDrawer = new planifticateur.ui.WeekDrawer(this);
        listScroller = new javax.swing.JScrollPane();
        activityListPanel = new planifticateur.ui.ListDrawer(this);
        errorScroller = new javax.swing.JScrollPane();
        errorPanel = new javax.swing.JPanel();
        errorArea = new javax.swing.JTextArea();
        clearButton = new javax.swing.JButton();
        etatBar = new javax.swing.JPanel();
        etatLabel = new javax.swing.JLabel();
        menuBar = new javax.swing.JMenuBar();
        fileMenuItem = new javax.swing.JMenu();
        ouvrirMenu = new javax.swing.JMenuItem();
        sauvegardeMenu = new javax.swing.JMenuItem();
        sauvegardesousMenu = new javax.swing.JMenuItem();
        exportMenu = new javax.swing.JMenuItem();
        quitterMenu = new javax.swing.JMenuItem();

        statisticsDialog.setMinimumSize(new java.awt.Dimension(500, 700));
        statisticsDialog.setName("Statistiques"); // NOI18N

        statisticsPanel.setMinimumSize(new java.awt.Dimension(470, 700));
        statisticsPanel.setPreferredSize(new java.awt.Dimension(472, 700));

        nbMaxCoursLabel.setText("Nombre maximal de cours : ");

        nbMaxCoursLundiLabel.setText("Lundi");

        nbMaxCoursLabelMardiLabel.setText("Mardi");

        nbMaxCoursMercrediLabel.setText("Mercredi");

        nbMaxCoursJeudiLabel.setText("Jeudi");

        nbMaxCoursVendrediLabel.setText("Vendredi");

        nbMaxCoursSamediLabel.setText("Samedi");

        nbMaxCoursDimancheLabel.setText("Dimanche");

        nbMaxCours0.setText("0");

        nbMaxCours1.setText("1");

        nbMaxCours2.setText("2");

        nbMaxCours3.setText("3");

        nbMaxCours4.setText("4");

        nbMaxCours5.setText("5");

        nbMaxCours6.setText("6");

        nbMoyCoursLabel.setText("Nombre moyen de cours : ");

        nbMoyCoursLundiLabel.setText("Lundi");

        nbMoyCoursLabelMardiLabel.setText("Mardi");

        nbMoyCoursMercrediLabel.setText("Mercredi");

        nbMoyCoursJeudiLabel.setText("Jeudi");

        nbMoyCoursVendrediLabel.setText("Vendredi");

        nbMoyCoursSamediLabel.setText("Samedi");

        nbMoyCoursDimancheLabel.setText("Dimanche");

        nbMoyCours0.setText("0");

        nbMoyCours1.setText("1");

        nbMoyCours2.setText("2");

        nbMoyCours3.setText("3");

        nbMoyCours4.setText("4");

        nbMoyCours5.setText("5");

        nbMoyCours6.setText("6");

        nbCoursLabel.setText("Nombre de cours : ");

        nbCoursLundiLabel.setText("Lundi");

        nbCoursMardiLabel.setText("Mardi");

        nbCoursMercrediLabel.setText("Mercredi");

        nbCoursJeudiLabel.setText("Jeudi");

        nbCoursVendrediLabel.setText("Vendredi");

        nbCoursSamediLabel.setText("Samedi");

        nbCoursDimancheLabel.setText("Dimanche");

        nbCours0.setText("0");

        nbCours1.setText("1");

        nbCours2.setText("2");

        nbCours3.setText("3");

        nbCours4.setText("4");

        nbCours5.setText("5");

        nbCours6.setText("6");

        indiceCovoiturageLabel.setText("Indice de covoiturage :");

        indiceCovoiturage.setText("0%");

        indiceCongestionLabel.setText("Indice de congestion de la circulation : ");

        indiceCongestion.setText("99%");

        javax.swing.GroupLayout statisticsPanelLayout = new javax.swing.GroupLayout(statisticsPanel);
        statisticsPanel.setLayout(statisticsPanelLayout);
        statisticsPanelLayout.setHorizontalGroup(
            statisticsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statisticsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(nbMaxCoursLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 314, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jSeparator2, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(statisticsPanelLayout.createSequentialGroup()
                .addGap(90, 90, 90)
                .addGroup(statisticsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(nbMoyCoursDimancheLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(statisticsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(nbMoyCoursSamediLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(nbMoyCoursVendrediLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(nbMoyCoursJeudiLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(nbMoyCoursMercrediLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(nbMoyCoursLabelMardiLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(nbMoyCoursLundiLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(36, 36, 36)
                .addGroup(statisticsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(nbMoyCours0, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(nbMoyCours1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(nbMoyCours2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(nbMoyCours3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(nbMoyCours4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(nbMoyCours5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(nbMoyCours6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(96, 96, 96))
            .addComponent(jSeparator3, javax.swing.GroupLayout.Alignment.TRAILING)
            .addComponent(jSeparator4, javax.swing.GroupLayout.Alignment.TRAILING)
            .addComponent(jSeparator5, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(statisticsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(statisticsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(statisticsPanelLayout.createSequentialGroup()
                        .addComponent(indiceCongestionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 297, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(52, 52, 52)
                        .addComponent(indiceCongestion, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(104, 104, 104))
                    .addGroup(statisticsPanelLayout.createSequentialGroup()
                        .addGroup(statisticsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(statisticsPanelLayout.createSequentialGroup()
                                .addComponent(indiceCovoiturageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 319, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(32, 32, 32)
                                .addComponent(indiceCovoiturage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(7, 7, 7))
                            .addGroup(statisticsPanelLayout.createSequentialGroup()
                                .addGap(77, 77, 77)
                                .addGroup(statisticsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(nbCoursSamediLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(nbCoursVendrediLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(nbCoursJeudiLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(nbCoursMercrediLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(nbCoursMardiLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(nbCoursLundiLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(nbCoursDimancheLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(27, 27, 27)
                                .addGroup(statisticsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(nbCours0, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(nbCours1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(nbCours2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(nbCours3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(nbCours4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(nbCours5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(nbCours6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(16, 16, 16))
                            .addComponent(nbMoyCoursLabel)
                            .addComponent(nbCoursLabel))
                        .addGap(91, 91, 91))))
            .addGroup(statisticsPanelLayout.createSequentialGroup()
                .addGap(87, 87, 87)
                .addGroup(statisticsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(nbMaxCoursDimancheLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(statisticsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(nbMaxCoursSamediLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(nbMaxCoursVendrediLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(nbMaxCoursJeudiLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(nbMaxCoursMercrediLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(nbMaxCoursLabelMardiLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(nbMaxCoursLundiLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(36, 36, 36)
                .addGroup(statisticsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(nbMaxCours0, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(nbMaxCours1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(nbMaxCours2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(nbMaxCours3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(nbMaxCours4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(nbMaxCours5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(nbMaxCours6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        statisticsPanelLayout.setVerticalGroup(
            statisticsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statisticsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(nbMaxCoursLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(statisticsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nbMaxCoursLundiLabel)
                    .addComponent(nbMaxCours0))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(statisticsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nbMaxCoursLabelMardiLabel)
                    .addComponent(nbMaxCours1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(statisticsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(nbMaxCours2)
                    .addGroup(statisticsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(nbMaxCoursMercrediLabel)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(statisticsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nbMaxCoursJeudiLabel)
                    .addComponent(nbMaxCours3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(statisticsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nbMaxCoursVendrediLabel)
                    .addComponent(nbMaxCours4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(statisticsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nbMaxCoursSamediLabel)
                    .addComponent(nbMaxCours5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(statisticsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nbMaxCoursDimancheLabel)
                    .addComponent(nbMaxCours6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(nbMoyCoursLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(statisticsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nbMoyCoursLundiLabel)
                    .addComponent(nbMoyCours0))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(statisticsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nbMoyCoursLabelMardiLabel)
                    .addComponent(nbMoyCours1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(statisticsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(nbMoyCours2)
                    .addGroup(statisticsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(nbMoyCoursMercrediLabel)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(statisticsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nbMoyCoursJeudiLabel)
                    .addComponent(nbMoyCours3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(statisticsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nbMoyCoursVendrediLabel)
                    .addComponent(nbMoyCours4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(statisticsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nbMoyCoursSamediLabel)
                    .addComponent(nbMoyCours5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(statisticsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nbMoyCoursDimancheLabel)
                    .addComponent(nbMoyCours6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(nbCoursLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(statisticsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nbCoursLundiLabel)
                    .addComponent(nbCours0))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(statisticsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nbCoursMardiLabel)
                    .addComponent(nbCours1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(statisticsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nbCoursMercrediLabel)
                    .addComponent(nbCours2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(statisticsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nbCoursJeudiLabel)
                    .addComponent(nbCours3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(statisticsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nbCoursVendrediLabel)
                    .addComponent(nbCours4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(statisticsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nbCoursSamediLabel)
                    .addComponent(nbCours5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(statisticsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nbCoursDimancheLabel)
                    .addComponent(nbCours6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(statisticsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(indiceCovoiturageLabel)
                    .addComponent(indiceCovoiturage))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator5, javax.swing.GroupLayout.PREFERRED_SIZE, 13, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(statisticsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(indiceCongestionLabel)
                    .addComponent(indiceCongestion))
                .addContainerGap(49, Short.MAX_VALUE))
        );

        statisticsScrollPane.setViewportView(statisticsPanel);

        statisticsDialog.getContentPane().add(statisticsScrollPane, java.awt.BorderLayout.CENTER);

        editDialog.setMinimumSize(new java.awt.Dimension(600, 460));
        editDialog.setName("Edition d'une activité"); // NOI18N
        editDialog.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                editDialogWindowClosing(evt);
            }
        });

        editScrollPane.setPreferredSize(new java.awt.Dimension(698, 360));

        editPanel.setMinimumSize(new java.awt.Dimension(200, 200));
        editPanel.setPreferredSize(new java.awt.Dimension(698, 360));

        codeLabel.setText("Code :");

        codeValue.setText("GLO-2004");

        sectionLabel.setText("Section :");

        sectionValue.setText("A");

        profLabel.setText("Professeur :");

        profValue.setText("JG");

        typeLabel.setText("Type :");

        typeValue.setText("Classe");

        timeLabel.setText("Durée :");

        timeValue.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(java.text.DateFormat.getTimeInstance(java.text.DateFormat.SHORT))));
        timeValue.setText("3,5");

        nameLabel.setText("Nom :");

        nameValue.setText("Génie Logiciel Orienté Objet");

        validateEdition.setBackground(new java.awt.Color(92, 184, 92));
        validateEdition.setForeground(new java.awt.Color(92, 184, 92));
        validateEdition.setText("Valider");
        validateEdition.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                validateEditionActionPerformed(evt);
            }
        });

        errorUpdateLabel.setForeground(new java.awt.Color(255, 0, 0));

        javax.swing.GroupLayout editPanelLayout = new javax.swing.GroupLayout(editPanel);
        editPanel.setLayout(editPanelLayout);
        editPanelLayout.setHorizontalGroup(
            editPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(editPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(editPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(editPanelLayout.createSequentialGroup()
                        .addGroup(editPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(nameValue, javax.swing.GroupLayout.DEFAULT_SIZE, 629, Short.MAX_VALUE)
                            .addGroup(editPanelLayout.createSequentialGroup()
                                .addGroup(editPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, editPanelLayout.createSequentialGroup()
                                        .addComponent(timeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(timeValue))
                                    .addGroup(editPanelLayout.createSequentialGroup()
                                        .addComponent(typeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(typeValue))
                                    .addGroup(editPanelLayout.createSequentialGroup()
                                        .addComponent(profLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(profValue))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, editPanelLayout.createSequentialGroup()
                                        .addComponent(codeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(codeValue, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, editPanelLayout.createSequentialGroup()
                                        .addComponent(sectionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(sectionValue)))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addGap(69, 69, 69))
                    .addGroup(editPanelLayout.createSequentialGroup()
                        .addComponent(nameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(editPanelLayout.createSequentialGroup()
                        .addComponent(validateEdition, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
            .addComponent(errorUpdateLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        editPanelLayout.setVerticalGroup(
            editPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(editPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(editPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(codeValue, javax.swing.GroupLayout.DEFAULT_SIZE, 34, Short.MAX_VALUE)
                    .addComponent(codeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(editPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(sectionValue, javax.swing.GroupLayout.DEFAULT_SIZE, 34, Short.MAX_VALUE)
                    .addComponent(sectionLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(editPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(profValue, javax.swing.GroupLayout.DEFAULT_SIZE, 34, Short.MAX_VALUE)
                    .addComponent(profLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(editPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(typeValue, javax.swing.GroupLayout.DEFAULT_SIZE, 34, Short.MAX_VALUE)
                    .addComponent(typeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(editPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(timeValue, javax.swing.GroupLayout.DEFAULT_SIZE, 34, Short.MAX_VALUE)
                    .addComponent(timeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(nameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(nameValue, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(errorUpdateLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(validateEdition, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(22, Short.MAX_VALUE))
        );

        editScrollPane.setViewportView(editPanel);

        javax.swing.GroupLayout editDialogLayout = new javax.swing.GroupLayout(editDialog.getContentPane());
        editDialog.getContentPane().setLayout(editDialogLayout);
        editDialogLayout.setHorizontalGroup(
            editDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(editScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 708, Short.MAX_VALUE)
        );
        editDialogLayout.setVerticalGroup(
            editDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(editScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 388, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        commentDialog.setMinimumSize(new java.awt.Dimension(620, 660));

        commentPanel.setMinimumSize(new java.awt.Dimension(200, 200));
        commentPanel.setPreferredSize(new java.awt.Dimension(590, 640));

        commentaryTab.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Date", "Activité", "Version", "Commentaire"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabScrollPane.setViewportView(commentaryTab);

        dateLabel.setText("Date :");

        activityLabel.setText("Activité :");

        versionLabel.setText("Version :");

        commentaryLabel.setText("Commentaire :");

        dateValue.setText("31/03/2015");

        versionValue.setText("v0.1");

        commentaryValue.setColumns(20);
        commentaryValue.setRows(5);
        areaScrollPane.setViewportView(commentaryValue);

        validateComment.setBackground(new java.awt.Color(92, 184, 92));
        validateComment.setForeground(new java.awt.Color(92, 184, 92));
        validateComment.setText("Valider");
        validateComment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                validateCommentActionPerformed(evt);
            }
        });

        errorCommentLabel.setForeground(new java.awt.Color(255, 0, 0));

        javax.swing.GroupLayout commentPanelLayout = new javax.swing.GroupLayout(commentPanel);
        commentPanel.setLayout(commentPanelLayout);
        commentPanelLayout.setHorizontalGroup(
            commentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 626, Short.MAX_VALUE)
            .addGroup(commentPanelLayout.createSequentialGroup()
                .addGroup(commentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(commentPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(commentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(areaScrollPane)
                            .addGroup(commentPanelLayout.createSequentialGroup()
                                .addGroup(commentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(commentaryLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(commentPanelLayout.createSequentialGroup()
                                        .addGroup(commentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(dateLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(activityLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE)
                                            .addComponent(versionLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGap(140, 140, 140)
                                        .addGroup(commentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(dateValue, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                                            .addComponent(activityValue)
                                            .addComponent(versionValue)))
                                    .addComponent(validateComment))
                                .addGap(0, 199, Short.MAX_VALUE))))
                    .addGroup(commentPanelLayout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(errorCommentLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        commentPanelLayout.setVerticalGroup(
            commentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(commentPanelLayout.createSequentialGroup()
                .addComponent(tabScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(commentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dateLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dateValue, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(commentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(activityLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(activityValue, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(commentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(versionValue, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
                    .addComponent(versionLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(commentaryLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(areaScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(errorCommentLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 27, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(validateComment)
                .addGap(14, 14, 14))
        );

        commentScrollPane.setViewportView(commentPanel);

        javax.swing.GroupLayout commentDialogLayout = new javax.swing.GroupLayout(commentDialog.getContentPane());
        commentDialog.getContentPane().setLayout(commentDialogLayout);
        commentDialogLayout.setHorizontalGroup(
            commentDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(commentScrollPane)
        );
        commentDialogLayout.setVerticalGroup(
            commentDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(commentScrollPane)
        );

        selectSession.setMinimumSize(new java.awt.Dimension(300, 250));

        selectSessionLabel.setText("Sélectionner la session à plannifier");

        automnButton.setText("Automne");
        automnButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                automnButtonMouseClicked(evt);
            }
        });

        winterButton.setText("Hiver");
        winterButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                winterButtonMouseClicked(evt);
            }
        });

        summerButton.setText("Été");
        summerButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                summerButtonMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout selectSessionLayout = new javax.swing.GroupLayout(selectSession.getContentPane());
        selectSession.getContentPane().setLayout(selectSessionLayout);
        selectSessionLayout.setHorizontalGroup(
            selectSessionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(selectSessionLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(selectSessionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(selectSessionLabel)
                    .addGroup(selectSessionLayout.createSequentialGroup()
                        .addComponent(automnButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(winterButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(summerButton)))
                .addContainerGap(84, Short.MAX_VALUE))
        );
        selectSessionLayout.setVerticalGroup(
            selectSessionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(selectSessionLayout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addComponent(selectSessionLabel)
                .addGap(41, 41, 41)
                .addGroup(selectSessionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(automnButton)
                    .addComponent(summerButton)
                    .addComponent(winterButton))
                .addContainerGap(143, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        mainWindow.setLayout(new java.awt.BorderLayout());

        groupButton.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        autoverificationToggle.setText("Auto Verification");
        autoverificationToggle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                autoverificationToggleActionPerformed(evt);
            }
        });
        groupButton.add(autoverificationToggle);

        autoPlanificationButton.setText("Auto Planification");
        autoPlanificationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                autoPlanificationButtonActionPerformed(evt);
            }
        });
        groupButton.add(autoPlanificationButton);

        statisticButton.setText("Statistiques");
        statisticButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                statisticButtonActionPerformed(evt);
            }
        });
        groupButton.add(statisticButton);

        commentButton.setText("Commentaires");
        commentButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                commentButtonActionPerformed(evt);
            }
        });
        groupButton.add(commentButton);

        etatSchedule.setBackground(new java.awt.Color(0, 255, 0));
        etatSchedule.setText("           ");
        etatSchedule.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        etatSchedule.setOpaque(true);
        groupButton.add(etatSchedule);

        mainWindow.add(groupButton, java.awt.BorderLayout.NORTH);

        splitDesignError.setBackground(new java.awt.Color(83, 83, 83));
        splitDesignError.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        splitDesignError.setDividerLocation(510);
        splitDesignError.setDividerSize(6);
        splitDesignError.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        splitDrawerActivity.setBackground(new java.awt.Color(83, 83, 83));
        splitDrawerActivity.setBorder(null);
        splitDrawerActivity.setDividerLocation(840);
        splitDrawerActivity.setDividerSize(4);

        weekScroller.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        weekScroller.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        weekScroller.setPreferredSize(new java.awt.Dimension(600, 100));
        weekScroller.addMouseWheelListener(new java.awt.event.MouseWheelListener() {
            public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
                weekScrollerMouseWheelMoved(evt);
            }
        });

        weekDrawer.setMinimumSize(new java.awt.Dimension(1780, 10));
        weekDrawer.setPreferredSize(new java.awt.Dimension(1780, 500));
        weekDrawer.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                weekDrawerMouseMoved(evt);
            }
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                weekDrawerMouseDragged(evt);
            }
        });
        weekDrawer.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                weekDrawerMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                weekDrawerMouseReleased(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                weekDrawerMouseExited(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                weekDrawerMouseEntered(evt);
            }
        });

        javax.swing.GroupLayout weekDrawerLayout = new javax.swing.GroupLayout(weekDrawer);
        weekDrawer.setLayout(weekDrawerLayout);
        weekDrawerLayout.setHorizontalGroup(
            weekDrawerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1780, Short.MAX_VALUE)
        );
        weekDrawerLayout.setVerticalGroup(
            weekDrawerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        weekScroller.setViewportView(weekDrawer);

        splitDrawerActivity.setLeftComponent(weekScroller);

        activityListPanel.setPreferredSize(new java.awt.Dimension(10, 500));
        activityListPanel.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                activityListPanelMouseDragged(evt);
            }
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                activityListPanelMouseMoved(evt);
            }
        });
        activityListPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                activityListPanelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                activityListPanelMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                activityListPanelMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                activityListPanelMouseReleased(evt);
            }
        });

        javax.swing.GroupLayout activityListPanelLayout = new javax.swing.GroupLayout(activityListPanel);
        activityListPanel.setLayout(activityListPanelLayout);
        activityListPanelLayout.setHorizontalGroup(
            activityListPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 251, Short.MAX_VALUE)
        );
        activityListPanelLayout.setVerticalGroup(
            activityListPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 505, Short.MAX_VALUE)
        );

        listScroller.setViewportView(activityListPanel);

        splitDrawerActivity.setRightComponent(listScroller);

        splitDesignError.setTopComponent(splitDrawerActivity);

        errorScroller.setMinimumSize(new java.awt.Dimension(240, 80));
        errorScroller.setPreferredSize(new java.awt.Dimension(240, 80));

        errorPanel.setBackground(new java.awt.Color(255, 255, 255));
        errorPanel.setMinimumSize(new java.awt.Dimension(240, 80));

        errorArea.setDisabledTextColor(Color.RED);
        errorArea.setColumns(20);
        errorArea.setRows(5);
        errorArea.setToolTipText("");
        errorArea.setEnabled(false);
        errorArea.setMinimumSize(new java.awt.Dimension(240, 80));

        clearButton.setText("Vider");
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout errorPanelLayout = new javax.swing.GroupLayout(errorPanel);
        errorPanel.setLayout(errorPanelLayout);
        errorPanelLayout.setHorizontalGroup(
            errorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(errorPanelLayout.createSequentialGroup()
                .addComponent(errorArea, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(clearButton, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        errorPanelLayout.setVerticalGroup(
            errorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(errorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(errorArea, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(clearButton))
        );

        errorScroller.setViewportView(errorPanel);

        splitDesignError.setRightComponent(errorScroller);

        mainWindow.add(splitDesignError, java.awt.BorderLayout.CENTER);

        etatBar.setBackground(new java.awt.Color(83, 83, 83));
        etatBar.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        etatBar.setMinimumSize(new java.awt.Dimension(20, 20));
        etatBar.setPreferredSize(new java.awt.Dimension(1024, 20));

        etatLabel.setForeground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout etatBarLayout = new javax.swing.GroupLayout(etatBar);
        etatBar.setLayout(etatBarLayout);
        etatBarLayout.setHorizontalGroup(
            etatBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, etatBarLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(etatLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 1093, Short.MAX_VALUE))
        );
        etatBarLayout.setVerticalGroup(
            etatBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(etatLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 18, Short.MAX_VALUE)
        );

        mainWindow.add(etatBar, java.awt.BorderLayout.PAGE_END);

        fileMenuItem.setText("Fichier");

        ouvrirMenu.setText("Ouvrir...");
        ouvrirMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ouvrirMenuActionPerformed(evt);
            }
        });
        fileMenuItem.add(ouvrirMenu);

        sauvegardeMenu.setText("Enregistrer");
        sauvegardeMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sauvegardeMenuActionPerformed(evt);
            }
        });
        fileMenuItem.add(sauvegardeMenu);

        sauvegardesousMenu.setText("Enregistrer sous...");
        sauvegardesousMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sauvegardesousMenuActionPerformed(evt);
            }
        });
        fileMenuItem.add(sauvegardesousMenu);

        exportMenu.setText("Exporter en PNG");
        exportMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportMenuActionPerformed(evt);
            }
        });
        fileMenuItem.add(exportMenu);

        quitterMenu.setText("Quitter");
        quitterMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitterMenuActionPerformed(evt);
            }
        });
        fileMenuItem.add(quitterMenu);

        menuBar.add(fileMenuItem);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainWindow, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainWindow, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 654, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void quitterMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quitterMenuActionPerformed
        System.exit(0);
    }//GEN-LAST:event_quitterMenuActionPerformed

    private void autoPlanificationButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_autoPlanificationButtonActionPerformed
        cleanScheduleConflicts();
        MainController.getInstance().createPlanning();
        if (MainController.getInstance().getCurrentSchedule() != null) {
            ArrayList<Activity> toUnplannified = weekDrawer.setSchedule(MainController.getInstance().getCurrentSchedule().getPlannifiedActivities(), MainController.getInstance().getValidation());
            for (Activity badActivity : toUnplannified) {
                badActivity.setDay(Day.NONE);
                badActivity.setStartHour(0);
                MainController.getInstance().getCurrentSchedule().getUnplannifiedActivities().add(badActivity);
                addErrorToCtrl(new CustomError("Une erreur avec [" + badActivity.toString() + "] est arrivée, elle a été placé en activité non planifiée.", TypeError.GENERIC_ERROR));
            }
            activityListPanel.setActivityList(MainController.getInstance().getCurrentSchedule().getUnplannifiedActivities());
        }
        realTimeStat();
        setErrors();
        isThereError();
        this.repaint();
        this.revalidate();
    }//GEN-LAST:event_autoPlanificationButtonActionPerformed

    private void statisticButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_statisticButtonActionPerformed
        HashMap<String, Object> stats = MainController.getInstance().showStatistics();
        if (stats != null) {
            statisticsDialog.setVisible(true);
            try {
                setStatistics(stats);
            } catch (NoSuchFieldException | IllegalArgumentException | IllegalAccessException ex) {
                Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_statisticButtonActionPerformed

    private void ouvrirMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ouvrirMenuActionPerformed
        selectSession.setVisible(true);
    }//GEN-LAST:event_ouvrirMenuActionPerformed

    private void autoverificationToggleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_autoverificationToggleActionPerformed
        MainController.getInstance().switchValidationMode();
        setErrors();
        isThereError();
        this.repaint();
        this.revalidate();
    }//GEN-LAST:event_autoverificationToggleActionPerformed

    private void activityListPanelMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_activityListPanelMousePressed
        Point mousePoint = evt.getPoint();
        Activity tmp = activityListPanel.getSelectedActivity(mousePoint);
        if (SwingUtilities.isRightMouseButton(evt)) {
            if (tmp != null) {
                editedActivity = tmp;
                setEditActivity(tmp);
                editDialog.setVisible(true);
            }
        } else {
            MainController.getInstance().setCurrentSelectedActivity(tmp);
            if (tmp != null) {
                box = new MovableBox(tmp, mousePoint,
                        weekScroller.getWidth() + weekScroller.getHorizontalScrollBar().getValue() - listScroller.getHorizontalScrollBar().getValue() + 4/* Size of the divider */,
                        0,
                        weekScroller.getVerticalScrollBar().getValue() - listScroller.getVerticalScrollBar().getValue(),
                        0,
                        false, true);
                box.setRightHour(MainController.getInstance().getAvailableZones());
                activityListPanel.setCurrentMove(true);
                this.repaint();
                this.revalidate();
            }
        }
    }//GEN-LAST:event_activityListPanelMousePressed

    private void activityListPanelMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_activityListPanelMouseReleased
        release(evt);
        activityListPanel.setCurrentMove(false);
    }//GEN-LAST:event_activityListPanelMouseReleased

    private void weekDrawerMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_weekDrawerMousePressed
        Point mousePoint = evt.getPoint();
        Activity tmp = weekDrawer.selectActivity(mousePoint);
        if (SwingUtilities.isRightMouseButton(evt)) {
            if (tmp != null) {
                editedActivity = tmp;
                setEditActivity(tmp);
                editDialog.setVisible(true);
            }
        } else {
            MainController.getInstance().setCurrentSelectedActivity(tmp);
            if (tmp != null) {
                box = new MovableBox(tmp, mousePoint,
                        0,
                        -weekScroller.getWidth() - weekScroller.getHorizontalScrollBar().getValue() + listScroller.getHorizontalScrollBar().getValue() - 4,
                        0,
                        -weekScroller.getVerticalScrollBar().getValue() + listScroller.getVerticalScrollBar().getValue(),
                        true, false);
                box.setRightHour(MainController.getInstance().getAvailableZones());
                weekDrawer.setMoveCurrently(true);
                this.repaint();
                this.revalidate();
            }
        }
    }//GEN-LAST:event_weekDrawerMousePressed

    private void weekDrawerMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_weekDrawerMouseReleased
        release(evt);
        weekDrawer.setMoveCurrently(false);
    }//GEN-LAST:event_weekDrawerMouseReleased

    private void weekDrawerMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_weekDrawerMouseDragged
        if (SwingUtilities.isLeftMouseButton(evt)) {
            Point       mousePoint = evt.getPoint();
            Activity    activity = MainController.getInstance().getCurrentSelectedActivity();
            
            if (activity != null && box != null) {
                box.x = mousePoint.x;
                box.y = mousePoint.y;
                autoScroll();
                String  time = weekDrawer.giveTime(mousePoint);
                etatLabel.setText(time);
                etatBar.repaint();
                etatBar.revalidate();
                this.repaint();
                this.revalidate();
            }
        }
    }//GEN-LAST:event_weekDrawerMouseDragged

    private void activityListPanelMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_activityListPanelMouseDragged
        if (SwingUtilities.isLeftMouseButton(evt)) {
            Point       mousePoint = evt.getPoint();
            Activity    activity = MainController.getInstance().getCurrentSelectedActivity();
            
            if (activity != null && box != null) {
                System.out.println();
                box.x = mousePoint.x;
                box.y = mousePoint.y;
                autoScroll();
                this.repaint();
                this.revalidate();
            }
        }
    }//GEN-LAST:event_activityListPanelMouseDragged

    private void weekDrawerMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_weekDrawerMouseEntered
        weekDrawer.setMoveCurrently(true);
    }//GEN-LAST:event_weekDrawerMouseEntered

    private void weekDrawerMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_weekDrawerMouseExited
        weekDrawer.setMoveCurrently(false);
    }//GEN-LAST:event_weekDrawerMouseExited

    private void activityListPanelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_activityListPanelMouseEntered
        activityListPanel.setCurrentMove(true);
    }//GEN-LAST:event_activityListPanelMouseEntered

    private void activityListPanelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_activityListPanelMouseExited
        activityListPanel.setCurrentMove(false);
    }//GEN-LAST:event_activityListPanelMouseExited

    private void weekScrollerMouseWheelMoved(java.awt.event.MouseWheelEvent evt) {//GEN-FIRST:event_weekScrollerMouseWheelMoved
        if (box != null && box.originActivity) {
            box.offsetXWeek = weekScroller.getWidth() + weekScroller.getHorizontalScrollBar().getValue() - listScroller.getHorizontalScrollBar().getValue() + 4/* Size of the divider */;
            box.offsetYWeek = weekScroller.getVerticalScrollBar().getValue() - listScroller.getVerticalScrollBar().getValue();
            this.repaint();
            this.revalidate();
        } else if (box != null && box.originWeek) {
            box.offsetXList = -weekScroller.getWidth() - weekScroller.getHorizontalScrollBar().getValue() + listScroller.getHorizontalScrollBar().getValue();
            box.offsetYList = -weekScroller.getVerticalScrollBar().getValue() + listScroller.getVerticalScrollBar().getValue();
            this.repaint();
            this.revalidate();
        }
    }//GEN-LAST:event_weekScrollerMouseWheelMoved

    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed
        MainController.getInstance().clearErrors();
        setErrors();
        isThereError();
        this.repaint();
        this.revalidate();
    }//GEN-LAST:event_clearButtonActionPerformed

    private void sauvegardeMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sauvegardeMenuActionPerformed
        if (MainController.getInstance().save()) {
            etatLabel.setText("La sauvegarde à bien été effectué");
        }
        setErrors();
        isThereError();
    }//GEN-LAST:event_sauvegardeMenuActionPerformed

    private void weekDrawerMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_weekDrawerMouseMoved
        Point mousePoint = evt.getPoint();
        Activity tmp = weekDrawer.selectActivity(mousePoint);
        String  time = weekDrawer.giveTime(mousePoint);
        
        if (tmp != null) {
            etatLabel.setText(tmp.toConflictString() + " --- " + time);
        } else {
            etatLabel.setText(time);
        }
        etatBar.repaint();
        etatBar.revalidate();
    }//GEN-LAST:event_weekDrawerMouseMoved

    private void validateEditionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_validateEditionActionPerformed
        CustomError error = null;
        if ((error = getEditActivity()) == null) {
            editedActivity = null;
            editDialog.setVisible(false);
            weekDrawer.sortRows();
            this.repaint();
            this.revalidate();
        } else {
            if (MainController.getInstance().getValidation() == true || error.getType() == TypeError.GENERIC_ERROR) {
                errorUpdateLabel.setText(error.getText());
                editDialog.repaint();
                editDialog.revalidate();
            } else {
                addErrorToCtrl(error);
                weekDrawer.sortRows();
                this.repaint();
                this.revalidate();
                editDialog.setVisible(false);
            }
        }
        setErrors();
        isThereError();
        realTimeStat();
    }//GEN-LAST:event_validateEditionActionPerformed

    private void automnButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_automnButtonMouseClicked
        selectSession.setVisible(false);
        openFileDialog("A");
    }//GEN-LAST:event_automnButtonMouseClicked

    private void winterButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_winterButtonMouseClicked
        selectSession.setVisible(false);
        openFileDialog("H");
    }//GEN-LAST:event_winterButtonMouseClicked

    private void summerButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_summerButtonMouseClicked
        selectSession.setVisible(false);
        openFileDialog("É");
    }//GEN-LAST:event_summerButtonMouseClicked

    private void sauvegardesousMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sauvegardesousMenuActionPerformed
        JFileChooser chooser = new JFileChooser(new File("."));
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Fichier activité", "cou");
        chooser.setFileFilter(filter);
        File fichier;
        
        if (chooser.showSaveDialog(null) == JFileChooser.APPROVE_OPTION) {
            fichier = chooser.getSelectedFile();
            if (MainController.getInstance().saveAs(fichier.getPath())) {
                etatLabel.setText("La sauvegarde à bien été effectuée !");
            }
        }
        setErrors();
        isThereError();
    }//GEN-LAST:event_sauvegardesousMenuActionPerformed

    private void exportMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportMenuActionPerformed
        JFileChooser chooser = new JFileChooser(new File("."));
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Image PNG", "png");
        chooser.setFileFilter(filter);
        File fichier;
        
        if (chooser.showSaveDialog(null) == JFileChooser.APPROVE_OPTION) {
            fichier = chooser.getSelectedFile();
            if (weekDrawer.drawInPNG(fichier)) {
                etatLabel.setText("L'export à bien été effectuée !");
            }
        }
    }//GEN-LAST:event_exportMenuActionPerformed

    private void activityListPanelMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_activityListPanelMouseMoved
        Point mousePoint = evt.getPoint();
        Activity tmp = activityListPanel.getSelectedActivity(mousePoint);
        
        if (tmp != null) {
            etatLabel.setText(tmp.toConflictString());
        } else {
            etatLabel.setText("");
        }
        etatBar.repaint();
        etatBar.revalidate();
    }//GEN-LAST:event_activityListPanelMouseMoved

    private void commentButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_commentButtonActionPerformed
        if (MainController.getInstance().getCurrentSchedule() != null) {
            DefaultTableModel model = (DefaultTableModel) commentaryTab.getModel();
            for (int i = model.getRowCount() - 1; i >= 0; i--) {
                model.removeRow(i);
            }
            this.setCommentary(MainController.getInstance().getCurrentSchedule().getCommentaries());
            commentDialog.setVisible(true);
        }
    }//GEN-LAST:event_commentButtonActionPerformed

    private void validateCommentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_validateCommentActionPerformed
        if (versionValue.getText().equals("") || commentaryValue.getText().equals("") || activityValue.getText().equals("")) {
            errorCommentLabel.setText("Tout les champs doivent être rempli");
            this.commentDialog.repaint();
            this.commentDialog.revalidate();
            return;
        }
        
        MainController.getInstance().addComment(versionValue.getText(), commentaryValue.getText(), activityValue.getText());

        DefaultTableModel model = (DefaultTableModel) commentaryTab.getModel();
        SimpleDateFormat ft = new SimpleDateFormat ("dd/MM/yyyy");
        String[] row = { ft.format(new Date()) , activityValue.getText(), versionValue.getText(), commentaryValue.getText() };
        model.addRow(row);
        this.dateValue.setText(ft.format(new Date()));  
        
        versionValue.setText("");
        commentaryValue.setText("");
        activityValue.setText("");
        this.commentDialog.repaint();
        this.commentDialog.revalidate();
    }//GEN-LAST:event_validateCommentActionPerformed

    private void editDialogWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_editDialogWindowClosing
        setErrors();
        isThereError();
    }//GEN-LAST:event_editDialogWindowClosing

    public MovableBox   getCurrentBox() {
        return box;
    }
    
    private void        release(java.awt.event.MouseEvent evt) {
        cleanScheduleConflicts();
        if (box != null) {
            if (activityListPanel.getCurrentMove() == true && box.originWeek) {
                weekDrawer.removeActivity(MainController.getInstance().getCurrentSelectedActivity());
                MainController.getInstance().unplanifyCurrentActivity();
                activityListPanel.addActivity(MainController.getInstance().getCurrentSelectedActivity());
            } else if (weekDrawer.getMoveCurrently() == true && box.originWeek) {
                Point pt = evt.getPoint();
                weekDrawer.moveActivity(pt, MainController.getInstance().getValidation(), MainController.getInstance().getCurrentSelectedActivity());
            } else if (weekDrawer.getMoveCurrently() == true && box.originActivity) {
                Point pt = evt.getPoint();
                pt.x += box.offsetXWeek;
                pt.y += box.offsetYWeek;
                if (weekDrawer.addActivity(pt, MainController.getInstance().getValidation(), MainController.getInstance().getCurrentSelectedActivity())) {
                    activityListPanel.removeActivity(MainController.getInstance().getCurrentSelectedActivity());
                    MainController.getInstance().planifyCurrentActivity();
                }
            }
        }
        MainController.getInstance().setCurrentSelectedActivity(null);
        box = null;
        realTimeStat();
        setErrors();
        isThereError();
        this.repaint();
        this.revalidate();
    }
    
    private void                realTimeStat() {
        HashMap<String, Object> stats = MainController.getInstance().showStatistics();
        if (stats != null) {
            try {
                setStatistics(stats);
            } catch (NoSuchFieldException | IllegalArgumentException | IllegalAccessException ex) {
                Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
    
    private void                setErrors() {
        ArrayList<CustomError>  errors = MainController.getInstance().getErrors();
        String                  text = "";
        
        if (errors != null) {
            for (CustomError error : errors) {
                text += error.toString() + "\n";
            }
            errorArea.setText(text);
        }
    }
    
    private void setStatistics(HashMap<String, Object> statistics) throws NoSuchFieldException, IllegalArgumentException, IllegalAccessException {
        for (Map.Entry<String, Object> entry : statistics.entrySet()) {
            String key = entry.getKey();
            Object value = entry.getValue();
            switch (key) {
                case "nbCours":
                    for (int i = 0; i < 7 ; i++) {
                        Field field = this.getClass().getDeclaredField(key + Integer.toString(i));
                        field.setAccessible(true);
                        JLabel label = (JLabel) field.get(this);
                        label.setText(Integer.toString((((int[]) value)[i])));
                    }
                    break;
                case "nbMaxCours":
                    for (int i = 0; i < 7; i++) {
                        Field field = this.getClass().getDeclaredField(key + Integer.toString(i));
                        field.setAccessible(true);
                        JLabel label = (JLabel) field.get(this);
                        label.setText(Integer.toString((((int[]) value)[i])));
                    }
                    break;
                case "nbMoyCours":
                    for (int i = 0; i < 7; i++) {
                        Field field = this.getClass().getDeclaredField(key + Integer.toString(i));
                        field.setAccessible(true);
                        JLabel label = (JLabel) field.get(this);
                        label.setText(Double.toString((((double[]) value)[i])));
                    }
                    break;
                case "indiceCovoiturage":
                    this.indiceCovoiturage.setText(Double.toString((double) value) + "%");
                    break;
                case "indiceCongestion":
                    this.indiceCongestion.setText(Integer.toString((int) value) + "%");
                    break;
                default :
                    break;
            }
        }
    }
    
    private void setEditActivity(Activity activity) {
        this.codeValue.setText(activity.getCode());
        this.sectionValue.setText(activity.getSection());
        this.profValue.setText(activity.getProfessor());
        this.typeValue.setText(activity.getType());
        double duration = activity.getDuration();
        String hour = Integer.toString( (int) duration);
        double min = (duration - (int) duration);
        String minute = Integer.toString((int) (60 * min));
        this.timeValue.setText(hour + ":" + minute);
        this.nameValue.setText(activity.getName());
    }
    
    private CustomError getEditActivity() {
        if (editedActivity == null) {
            return (new CustomError("Impossible de trouver l'activité à éditer", TypeError.GENERIC_ERROR));
        }
        if (this.nameValue.getText().equals("") 
                || this.sectionValue.getText().equals("") 
                || this.typeValue.getText().equals("") 
                || this.profValue.getText().equals("")) {
            return (new CustomError("Tout les champs doivent être rempli", TypeError.GENERIC_ERROR));
        }
        String time = this.timeValue.getText();
        if (!Pattern.matches("\\d+:\\d+" ,time)) {
            return (new CustomError("La durée doit être formater sous la forme HH:MM", TypeError.GENERIC_ERROR));
        }
        String[] tabTime = time.split(":");
        double duration = Math.round((Double.parseDouble(tabTime[0]) + Double.parseDouble(tabTime[1]) / 60.0) * 100.0) / 100.0;
        return MainController.getInstance().updateActivity(editedActivity, this.nameValue.getText(), 
                                                        this.sectionValue.getText(), 
                                                        this.typeValue.getText(), 
                                                        duration, 
                                                        this.profValue.getText());
    }
   
    private void setCommentary(ArrayList<Comment> commentaryList) {
        if (commentaryList != null) {
            DefaultTableModel model = (DefaultTableModel) commentaryTab.getModel();
            SimpleDateFormat ft = new SimpleDateFormat ("dd/MM/yyyy");

            for (Comment comment : commentaryList) {
                String[] row = { ft.format(comment.getDate()) , comment.getCode(), comment.getVersion(), comment.getText() };
                model.addRow(row);
            }
            this.dateValue.setText(ft.format(new Date()));            
        }
    }
    
    private void autoScroll() {
        int horizontalScrollBar = weekScroller.getHorizontalScrollBar().getValue();
        int verticalScrollBar = weekScroller.getVerticalScrollBar().getValue();
        int rightBorder = weekScroller.getWidth() + horizontalScrollBar;
        int leftBorder = horizontalScrollBar;
        int topBorder = verticalScrollBar;
        int bottomBorder = weekScroller.getHeight() + verticalScrollBar;
        int xCurrentBoxPosition = box.x + box.offsetXWeek;
        int yCurrentBoxPosition = box.y + box.offsetYWeek; // Modifier la variable d'offset si pas le même nom

        if (xCurrentBoxPosition < rightBorder && xCurrentBoxPosition > rightBorder - ScaleMacro.AUTOSCROLL_ZONE) {
            //MOVE RIGHT
            if (weekDrawer.getWidth() > ( weekScroller.getWidth() + horizontalScrollBar + ScaleMacro.AUTOSCROLL_INCREMENT)) {
                weekScroller.getHorizontalScrollBar().setValue(horizontalScrollBar + ScaleMacro.AUTOSCROLL_INCREMENT);
                weekScrollerMouseWheelMoved(null);
            }
        }
        else if (xCurrentBoxPosition > leftBorder && xCurrentBoxPosition < leftBorder + ScaleMacro.AUTOSCROLL_ZONE) {
            //MOVE LEFT
            if (leftBorder > ScaleMacro.AUTOSCROLL_INCREMENT) {
                weekScroller.getHorizontalScrollBar().setValue(horizontalScrollBar - ScaleMacro.AUTOSCROLL_INCREMENT);
                weekScrollerMouseWheelMoved(null);
            }
        }
        
        if (yCurrentBoxPosition < bottomBorder && yCurrentBoxPosition > bottomBorder - ScaleMacro.AUTOSCROLL_ZONE) {
            //MOVE BOTTOM
            if (weekDrawer.getHeight() > (weekScroller.getHeight() + verticalScrollBar + ScaleMacro.AUTOSCROLL_INCREMENT)) {
                weekScroller.getVerticalScrollBar().setValue(verticalScrollBar + ScaleMacro.AUTOSCROLL_INCREMENT);
                weekScrollerMouseWheelMoved(null);
            }
        }
        else if (yCurrentBoxPosition > topBorder && yCurrentBoxPosition < topBorder + ScaleMacro.AUTOSCROLL_ZONE) {
            //MOVE TOP
            if (topBorder > ScaleMacro.AUTOSCROLL_INCREMENT) {
                weekScroller.getVerticalScrollBar().setValue(verticalScrollBar - ScaleMacro.AUTOSCROLL_INCREMENT);
                weekScrollerMouseWheelMoved(null);
            }
        }
    }
    
    private void    openFileDialog(String session) {
        JFileChooser dialogue = new JFileChooser(new File("."));
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Fichier activité", "cou");
        dialogue.setFileFilter(filter);
        
        File fichier;
        
        if (dialogue.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
            cleanScheduleConflicts();
	    fichier = dialogue.getSelectedFile();
            MainController.getInstance().openFile(fichier.getPath(), session);
            if (MainController.getInstance().getCurrentSchedule() != null) {
                ArrayList<Activity> toUnplannified = weekDrawer.setSchedule(MainController.getInstance().getCurrentSchedule().getPlannifiedActivities(), MainController.getInstance().getValidation());
                for (Activity badActivity : toUnplannified) {
                    badActivity.setDay(Day.NONE);
                    badActivity.setStartHour(0);
                    MainController.getInstance().getCurrentSchedule().getUnplannifiedActivities().add(badActivity);
                    addErrorToCtrl(new CustomError("Une erreur avec [" + badActivity.toString() + "] est arrivée, elle a été placé en activité non planifiée.", TypeError.GENERIC_ERROR));
                }
                activityListPanel.setActivityList(MainController.getInstance().getCurrentSchedule().getUnplannifiedActivities());
            }
            realTimeStat();
	}
        setErrors();
        isThereError();
        this.repaint();
        this.revalidate();
    }
    
    private void    isThereError() {
        boolean     hasScheduleError = false;
        for (CustomError error : MainController.getInstance().getErrors()) {
            if (error.getType() == TypeError.CONSTRAINT_ERROR || error.getType() == TypeError.SCHEDULING_CONFLICT) {
                hasScheduleError = true;
                break;
            }
        }
        if (hasScheduleError)
            etatSchedule.setBackground(Color.red);
        else
            etatSchedule.setBackground(Color.green);
    }
    
    private void    cleanScheduleConflicts() {
        int         i = 0;
        
        while (i < MainController.getInstance().getErrors().size()) {
            if (MainController.getInstance().getErrors().get(i).getType() == TypeError.SCHEDULING_CONFLICT ||
                MainController.getInstance().getErrors().get(i).getType() == TypeError.CONSTRAINT_ERROR) {
                MainController.getInstance().getErrors().remove(i);
                continue;
            }
            i++;
        }
    }
    
    public void     addErrorToCtrl(CustomError error) {
        MainController.getInstance().getErrors().add(error);
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainWindow().setVisible(true);
                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel activityLabel;
    private planifticateur.ui.ListDrawer activityListPanel;
    private javax.swing.JTextField activityValue;
    private javax.swing.JScrollPane areaScrollPane;
    private javax.swing.JButton autoPlanificationButton;
    private javax.swing.JButton automnButton;
    private javax.swing.JToggleButton autoverificationToggle;
    private javax.swing.JButton clearButton;
    private javax.swing.JLabel codeLabel;
    private javax.swing.JLabel codeValue;
    private javax.swing.JButton commentButton;
    private javax.swing.JDialog commentDialog;
    private javax.swing.JPanel commentPanel;
    private javax.swing.JScrollPane commentScrollPane;
    private javax.swing.JLabel commentaryLabel;
    private javax.swing.JTable commentaryTab;
    private javax.swing.JTextArea commentaryValue;
    private javax.swing.JLabel dateLabel;
    private javax.swing.JLabel dateValue;
    private javax.swing.JDialog editDialog;
    private javax.swing.JPanel editPanel;
    private javax.swing.JScrollPane editScrollPane;
    private javax.swing.JTextArea errorArea;
    private javax.swing.JLabel errorCommentLabel;
    private javax.swing.JPanel errorPanel;
    private javax.swing.JScrollPane errorScroller;
    private javax.swing.JLabel errorUpdateLabel;
    private javax.swing.JPanel etatBar;
    private javax.swing.JLabel etatLabel;
    private javax.swing.JLabel etatSchedule;
    private javax.swing.JMenuItem exportMenu;
    private javax.swing.JMenu fileMenuItem;
    private javax.swing.JPanel groupButton;
    private javax.swing.JLabel indiceCongestion;
    private javax.swing.JLabel indiceCongestionLabel;
    private javax.swing.JLabel indiceCovoiturage;
    private javax.swing.JLabel indiceCovoiturageLabel;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JScrollPane listScroller;
    private javax.swing.JPanel mainWindow;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JTextField nameValue;
    private javax.swing.JLabel nbCours0;
    private javax.swing.JLabel nbCours1;
    private javax.swing.JLabel nbCours2;
    private javax.swing.JLabel nbCours3;
    private javax.swing.JLabel nbCours4;
    private javax.swing.JLabel nbCours5;
    private javax.swing.JLabel nbCours6;
    private javax.swing.JLabel nbCoursDimancheLabel;
    private javax.swing.JLabel nbCoursJeudiLabel;
    private javax.swing.JLabel nbCoursLabel;
    private javax.swing.JLabel nbCoursLundiLabel;
    private javax.swing.JLabel nbCoursMardiLabel;
    private javax.swing.JLabel nbCoursMercrediLabel;
    private javax.swing.JLabel nbCoursSamediLabel;
    private javax.swing.JLabel nbCoursVendrediLabel;
    private javax.swing.JLabel nbMaxCours0;
    private javax.swing.JLabel nbMaxCours1;
    private javax.swing.JLabel nbMaxCours2;
    private javax.swing.JLabel nbMaxCours3;
    private javax.swing.JLabel nbMaxCours4;
    private javax.swing.JLabel nbMaxCours5;
    private javax.swing.JLabel nbMaxCours6;
    private javax.swing.JLabel nbMaxCoursDimancheLabel;
    private javax.swing.JLabel nbMaxCoursJeudiLabel;
    private javax.swing.JLabel nbMaxCoursLabel;
    private javax.swing.JLabel nbMaxCoursLabelMardiLabel;
    private javax.swing.JLabel nbMaxCoursLundiLabel;
    private javax.swing.JLabel nbMaxCoursMercrediLabel;
    private javax.swing.JLabel nbMaxCoursSamediLabel;
    private javax.swing.JLabel nbMaxCoursVendrediLabel;
    private javax.swing.JLabel nbMoyCours0;
    private javax.swing.JLabel nbMoyCours1;
    private javax.swing.JLabel nbMoyCours2;
    private javax.swing.JLabel nbMoyCours3;
    private javax.swing.JLabel nbMoyCours4;
    private javax.swing.JLabel nbMoyCours5;
    private javax.swing.JLabel nbMoyCours6;
    private javax.swing.JLabel nbMoyCoursDimancheLabel;
    private javax.swing.JLabel nbMoyCoursJeudiLabel;
    private javax.swing.JLabel nbMoyCoursLabel;
    private javax.swing.JLabel nbMoyCoursLabelMardiLabel;
    private javax.swing.JLabel nbMoyCoursLundiLabel;
    private javax.swing.JLabel nbMoyCoursMercrediLabel;
    private javax.swing.JLabel nbMoyCoursSamediLabel;
    private javax.swing.JLabel nbMoyCoursVendrediLabel;
    private javax.swing.JMenuItem ouvrirMenu;
    private javax.swing.JLabel profLabel;
    private javax.swing.JTextField profValue;
    private javax.swing.JMenuItem quitterMenu;
    private javax.swing.JMenuItem sauvegardeMenu;
    private javax.swing.JMenuItem sauvegardesousMenu;
    private javax.swing.JLabel sectionLabel;
    private javax.swing.JTextField sectionValue;
    private javax.swing.JDialog selectSession;
    private javax.swing.JLabel selectSessionLabel;
    private javax.swing.JSplitPane splitDesignError;
    private javax.swing.JSplitPane splitDrawerActivity;
    private javax.swing.JButton statisticButton;
    private javax.swing.JDialog statisticsDialog;
    private javax.swing.JPanel statisticsPanel;
    private javax.swing.JScrollPane statisticsScrollPane;
    private javax.swing.JButton summerButton;
    private javax.swing.JScrollPane tabScrollPane;
    private javax.swing.JLabel timeLabel;
    private javax.swing.JFormattedTextField timeValue;
    private javax.swing.JLabel typeLabel;
    private javax.swing.JTextField typeValue;
    private javax.swing.JButton validateComment;
    private javax.swing.JButton validateEdition;
    private javax.swing.JLabel versionLabel;
    private javax.swing.JTextField versionValue;
    private planifticateur.ui.WeekDrawer weekDrawer;
    private javax.swing.JScrollPane weekScroller;
    private javax.swing.JButton winterButton;
    // End of variables declaration//GEN-END:variables
}
